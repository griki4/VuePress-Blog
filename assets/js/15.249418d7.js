(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{458:function(t,s,a){t.exports=a.p+"assets/img/reactive.7fba0d70.png"},459:function(t,s,a){t.exports=a.p+"assets/img/effect_stack.4f5822a5.png"},537:function(t,s,a){"use strict";a.r(s);var n=a(2),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"响应式系统的作用与实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#响应式系统的作用与实现"}},[t._v("#")]),t._v(" 响应式系统的作用与实现")]),t._v(" "),s("p",[s("code",[t._v("Vue3")]),t._v("的响应式系统的实现核心就是就是两点。")]),t._v(" "),s("ul",[s("li",[t._v("依赖收集")]),t._v(" "),s("li",[t._v("派发更新")])]),t._v(" "),s("p",[t._v("依赖收集是在读取数据阶段发生的。假如一个"),s("code",[t._v("effect")]),t._v("函数读取了某一个对象的属性，通过给这个对象设置"),s("code",[t._v("Proxy")]),t._v("\n代理并且设置"),s("code",[t._v("getter")]),t._v("配置，可以知道这个函数并且将它收集到某个地方。也就是依赖收集。")]),t._v(" "),s("p",[t._v("派发更新是指当对象的某个属性发生变化时（通过"),s("code",[t._v("Proxy")]),t._v("设置"),s("code",[t._v("setter")]),t._v("选项来实现属性值变化监听），将这个属性收集到的依赖（"),s("code",[t._v("effect")]),t._v("函数）取出来依次执行。\n执行时这些函数会读取新的属性值并执行相应操作，也就是派发更新操作。")]),t._v(" "),s("p",[t._v("具体"),s("code",[t._v("Vue")]),t._v("中关于实现依赖收集的数据结构如下所示：\n"),s("img",{attrs:{src:a(458),alt:"响应式数据结构"}}),t._v("\n简单解释一下这个结构。首先有一个"),s("code",[t._v("WeakMap")]),t._v("，它的"),s("code",[t._v("key")]),t._v("是"),s("code",[t._v("target")]),t._v("，"),s("code",[t._v("target")]),t._v("是我们代理的对象，比如\n"),s("code",[t._v("Proxy")]),t._v("代理"),s("code",[t._v("data")]),t._v("的时候，"),s("code",[t._v("data")]),t._v("里面可能有很多对象，"),s("code",[t._v("target")]),t._v("代表的就是他们。")]),t._v(" "),s("p",[s("strong",[t._v("使用"),s("code",[t._v("WeakMap")]),t._v("的原因是，弱引用的特性可以做到"),s("code",[t._v("target")]),t._v("不再被引用时能够正确的被垃圾回收机制回收。")]),t._v("\n毕竟如果原对象都不存在了，那么对于原对象的代理自然也没有必要了。")]),t._v(" "),s("p",[t._v("然后是每个"),s("code",[t._v("target")]),t._v("的值，是对象的每个属性，也就是图中的"),s("code",[t._v("key")]),t._v("。"),s("code",[t._v("key")]),t._v("的值是一个"),s("code",[t._v("Set")]),t._v("结构，类似数组，这个里面就是响应式的主角，\n被作为依赖收集的"),s("code",[t._v("effect")]),t._v("函数。")]),t._v(" "),s("p",[s("strong",[t._v("之所以每个"),s("code",[t._v("key")]),t._v("都需要有自己的"),s("code",[t._v("Set")]),t._v("是因为希望能够准确定位哪一个属性发生了变化。而不是把所有属性的\n"),s("code",[t._v("effect")]),t._v("函数都取出来执行，这显示不是明智的做法。")])]),t._v(" "),s("h2",{attrs:{id:"及时清除无效依赖"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#及时清除无效依赖"}},[t._v("#")]),t._v(" 及时清除无效依赖")]),t._v(" "),s("p",[t._v("上述通过"),s("code",[t._v("Proxy")]),t._v("的"),s("code",[t._v("getter")]),t._v("和"),s("code",[t._v("setter")]),t._v("实现的响应式系统看上去比较完善了，但是还存在一个问题。\n比如一个"),s("code",[t._v("effect")]),t._v("函数在后续的使用过程中，原先可能读取了一个属性，但是后续又不读取了，例如：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("ok")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("text")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello world'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Proxy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* ... */")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("effect")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("effectFn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    document"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("innerText "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ok "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("text "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'not'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[s("code",[t._v("ok")]),t._v("属性如果变为"),s("code",[t._v("false")]),t._v("则"),s("code",[t._v("effectFn")]),t._v("就不会读取"),s("code",[t._v("obj.text")]),t._v("属性了，但是之前他已经作为依赖被收集\n到了"),s("code",[t._v("obj.text")]),t._v("的依赖中。后续"),s("code",[t._v("obj.text")]),t._v("属性变换还是会引起"),s("code",[t._v("effectFn")]),t._v("函数执行，这是不必要的性能消耗。\n解决这个问题的方法是：\n"),s("strong",[t._v("每次执行"),s("code",[t._v("effect")]),t._v("函数之前，把它从所有的集合中先移除然后在执行。")]),t._v("\n因为"),s("code",[t._v("effect")]),t._v("重新执行时又会读取新数据，重新触发依赖收集。同时还可以保证那些无效的依赖可以即使被清除。")]),t._v(" "),s("p",[t._v("要做到这一点，在"),s("code",[t._v("effect")]),t._v("函数当中我们也需要知道，它被作为依赖收集到了哪些"),s("code",[t._v("key")]),t._v("的依赖集合中。所以在"),s("code",[t._v("Proxy")]),t._v("\n收集依赖时，除了将"),s("code",[t._v("effect")]),t._v("函数收集起来，还应该调用每个"),s("code",[t._v("effect")]),t._v("中的某个方法，将依赖集合自身添加到"),s("code",[t._v("effect")]),t._v("\n函数中保存依赖集合的数据结构。")]),t._v(" "),s("p",[t._v("添加了无效依赖清除功能之后，响应式系统的简易代码如下：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//全局的WeakMap")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" bucket "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WeakMap")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//设置代理")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Proxy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//activeEffect就是存储effect函数的临时变量")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//effect函数内部首先会进行一个清除操作，然后执行真正的副作用函数。")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("activeEffect"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" target"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" \n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" depsMap "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" bucket"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("target"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//没有target代理")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("depsMap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            bucket"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("depsMap "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//定位属性")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" deps "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" depsMap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("deps"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            deps"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("deps "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//收集依赖")]),t._v("\n        deps"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("activeEffect"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//在effect函数的deps中添加当前的deps")]),t._v("\n        activeEffect"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("deps"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("deps"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" target"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newVal"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//修改属性值")]),t._v("\n        target"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newVal\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//取出effect函数依次执行")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" depsMap "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" bucket"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("depsMap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" effects "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" depsMap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        effects "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" effects"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("fn")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("这里也简单贴一下"),s("code",[t._v("activeEffect")]),t._v("的代码")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" activeEffect\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("effect")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("fn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("effectFn")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//cleanup从依赖中清除自己")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cleanup")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        activeEffect "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" effectFn\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//存储deps的数据结构")]),t._v("\n    effectFn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("deps "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("effectFn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cleanup")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" effectFn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("deps"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// deps 是依赖集合")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" deps "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" effectFn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("deps"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将 effectFn 从依赖集合中移除")]),t._v("\n        deps"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("delete")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("effectFn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 最后需要重置 effectFn.deps 数组")]),t._v("\n    effectFn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("deps"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("总结就是："),s("code",[t._v("deps")]),t._v("和"),s("code",[t._v("effect")]),t._v("两者是相互知根知底的。"),s("code",[t._v("deps")]),t._v("知道自己收集了哪些依赖，"),s("code",[t._v("effect")]),t._v("也知道自己被\n哪些"),s("code",[t._v("deps")]),t._v("当做依赖收集了。")]),t._v(" "),s("h2",{attrs:{id:"嵌套的effect"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#嵌套的effect"}},[t._v("#")]),t._v(" 嵌套的effect")]),t._v(" "),s("p",[s("code",[t._v("effect")]),t._v("或者说"),s("code",[t._v("wathcer")]),t._v("的嵌套情况十分普遍。最简单的一个父组件中的子组件，就是"),s("code",[t._v("effect")]),t._v("的嵌套。")]),t._v(" "),s("p",[t._v("解决嵌套的依赖收集也很简单，"),s("code",[t._v("activeEffect")]),t._v("仍然指向当前"),s("code",[t._v("effectFn")]),t._v("，只是全局添加一个栈结构来保证\n嵌套发生时也能进行依赖收集。如图:\n"),s("img",{attrs:{src:a(459),alt:"嵌套effect的栈处理方法"}}),t._v("\n依赖收集的流程如下：")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("activeEffect")]),t._v("指向当前准备执行的"),s("code",[t._v("effectFn")]),t._v("，并将"),s("code",[t._v("effectFn")]),t._v("入栈。")]),t._v(" "),s("li",[t._v("执行"),s("code",[t._v("effectFn")]),t._v("。")]),t._v(" "),s("li",[t._v("将"),s("code",[t._v("effectFn")]),t._v("弹出栈，并将"),s("code",[t._v("activeEffect")]),t._v("指向栈顶元素。")])]),t._v(" "),s("p",[t._v("显然，当"),s("code",[t._v("effectFn")]),t._v("发生嵌套时上述流程重复执行，保证了依赖的正确收集。")]),t._v(" "),s("h2",{attrs:{id:"调度执行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#调度执行"}},[t._v("#")]),t._v(" 调度执行")]),t._v(" "),s("p",[t._v("这一步涉及到了"),s("code",[t._v("Vue")]),t._v("的异步更新策略，后续写"),s("code",[t._v("nextTick")]),t._v("相关的文章时会详细说明。现在只需要记住，\n"),s("code",[t._v("Vue")]),t._v("中存在着调度器，可以决定"),s("code",[t._v("effect")]),t._v("函数的执行时机和次数等。")]),t._v(" "),s("h2",{attrs:{id:"computed实现原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#computed实现原理"}},[t._v("#")]),t._v(" computed实现原理")]),t._v(" "),s("p",[t._v("看过源码都知道"),s("code",[t._v("computed")]),t._v("中两个重要的配置，"),s("code",[t._v("lazy")]),t._v("和"),s("code",[t._v("dirty")]),t._v("。两者扮演了不同的角色，分别说明。")]),t._v(" "),s("h3",{attrs:{id:"lazy"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lazy"}},[t._v("#")]),t._v(" lazy")]),t._v(" "),s("p",[s("strong",[s("code",[t._v("lazy")]),t._v("配置的作用是让计算属性默认懒执行，即被读取时才会执行。")])]),t._v(" "),s("p",[t._v("通过调度器传入"),s("code",[t._v("lazy")]),t._v("配置，在计算属性的"),s("code",[t._v("effectFn")]),t._v("中进行的流程和普通的"),s("code",[t._v("effectFn")]),t._v("会稍微不同。首先，真正的副作用函数的执行结果会被当做"),s("code",[t._v("effectFn")]),t._v("的返回值；其次，如果检测到"),s("code",[t._v("lazy")]),t._v("配置为"),s("code",[t._v("true")]),t._v("，则会返回\n"),s("code",[t._v("effectFn")]),t._v("函数而不是直接执行它。然后就是，执行计算属性得到的是一个对象，只有读取了这个对象里面的值的\n时候，"),s("code",[t._v("effectFn")]),t._v("函数才会被执行。"),s("code",[t._v("computed")]),t._v("的代码如下：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("computed")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("getter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" effectFn "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("effect")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("getter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("lazy")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("get")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("value")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("effectFn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" obj\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("也即只有真正读取了"),s("code",[t._v("obj.value")]),t._v("的时候"),s("code",[t._v("effectFn")]),t._v("才会执行，它内部的读取属性、依赖收集等操作才会执行。\n这就是为什么说计算属性是默认懒执行的。")]),t._v(" "),s("h3",{attrs:{id:"dirty"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dirty"}},[t._v("#")]),t._v(" dirty")]),t._v(" "),s("p",[s("strong",[s("code",[t._v("dirty")]),t._v("赋予了计算属性缓存。")])]),t._v(" "),s("p",[t._v("代码也很简单，在上面代码的基础上修改")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("computed")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("getter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" value\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" dirty "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" effectFn "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("effect")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("getter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("lazy")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("get")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("value")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//dirty为true才会重新计算")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dirty"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                value "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("effectFn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" value\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//否则直接返回缓存值")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" value\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" obj\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("计算属性的懒执行和缓存都是非常出色的性能优化方式，可以较为有效的避免性能浪费。我想这也是为什么官方\n文档里面也建议可以多使用计算属性吧。")]),t._v(" "),s("p",[t._v("PS：计算属性的懒执行在依赖收集时会出现问题，需要手动进行依赖收集以及更新派发。")]),t._v(" "),s("h2",{attrs:{id:"watch实现原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#watch实现原理"}},[t._v("#")]),t._v(" watch实现原理")]),t._v(" "),s("p",[s("code",[t._v("watch")]),t._v("的实现实际上就是对"),s("code",[t._v("effect")]),t._v("的简单封装。使用时可以传入函数也可以传入一个对象，"),s("code",[t._v("Vue")]),t._v("内部会自动\n进行判断，然后将其封装为一个"),s("code",[t._v("getter")]),t._v("函数。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("getter")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" fn "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("traverse")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//traverse函数会读取用户传入的对象的属性，触发依赖收集")]),t._v("\n")])])]),s("p",[t._v("之后如果"),s("code",[t._v("watch")]),t._v("的属性的值变化，就会触发用户传入的回调函数（这是调度器实现的。）")]),t._v(" "),s("h3",{attrs:{id:"获取oldvalue-newvalue"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#获取oldvalue-newvalue"}},[t._v("#")]),t._v(" 获取oldValue newValue")]),t._v(" "),s("p",[t._v("新值很好获取，直接在数据变化时重新读取即可。"),s("code",[t._v("oldValue")]),t._v("的获取则是依赖于"),s("code",[t._v("lazy")]),t._v("配置。\n在用户使用"),s("code",[t._v("watch")]),t._v("的时候，使用"),s("code",[t._v("lazy")]),t._v("手动执行一次"),s("code",[t._v("effectFn")]),t._v("获取第一次执行的值，后续数据变化时更新即可。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("watch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("source"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cb")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" getter\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" source "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'function'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        getter "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" source\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("getter")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("traverse")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("source"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 定义旧值与新值")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" oldValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newValue\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用 effect 注册副作用函数时，开启 lazy 选项，并把返回值存储到")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" effectFn "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("effect")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("lazy")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("scheduler")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在 scheduler 中重新执行副作用函数，得到的是新值")]),t._v("\n                newValue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("effectFn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将旧值和新值作为回调函数的参数")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cb")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" oldValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 更新旧值，不然下一次会得到错误的旧值")]),t._v("\n                oldValue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newValue\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 手动调用副作用函数，拿到的值就是旧值")]),t._v("\n    oldValue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("effectFn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"立即执行watch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#立即执行watch"}},[t._v("#")]),t._v(" 立即执行watch")]),t._v(" "),s("p",[t._v("配置"),s("code",[t._v("immediate")]),t._v("选项可以立即执行一次用户回调，这里逻辑也并不复杂，只需要进行一个简单的判断。\n判断用户如果传入了"),s("code",[t._v("immediate")]),t._v("选项，上面的"),s("code",[t._v("scheduler")]),t._v("函数就立马执行。")]),t._v(" "),s("h2",{attrs:{id:"经典面试题-computed和watch的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#经典面试题-computed和watch的区别"}},[t._v("#")]),t._v(" 经典面试题：computed和watch的区别？")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("computed")]),t._v("默认懒执行，即被读取时才会执行。并且这个懒执行是源码层面的，不可更改。"),s("code",[t._v("watch")]),t._v("则在数据变化时执行，并且可以通过"),s("code",[t._v("immediate")]),t._v("选项来设置立即执行。")]),t._v(" "),s("li",[s("code",[t._v("computed")]),t._v("有缓存，"),s("code",[t._v("dirty")]),t._v("的存在让每一次读取计算属性时都会查看缓存是否生效。")]),t._v(" "),s("li",[t._v("同步异步问题。"),s("code",[t._v("computed")]),t._v("依赖其他值得到结果，不能处理异步。但"),s("code",[t._v("watch")]),t._v("在数据变化时就执行，可以处理异步。")])])])}),[],!1,null,null,null);s.default=e.exports}}]);