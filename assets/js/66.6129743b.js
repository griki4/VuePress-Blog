(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{517:function(t,a,s){"use strict";s.r(a);var e=s(2),n=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"orm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#orm"}},[t._v("#")]),t._v(" ORM")]),t._v(" "),a("p",[t._v("在和数据库进行交互时都需要使用特定的语言，比如使用关系型数据库时候的SQL，或者是使用MongoDB时的MQL。这些特定语言可以直接和数据库交互，快速进行增删改查。但是这些特定语言和在实际开发中使用的编程语言特性存在一定差距，并且很多时候可能都需要编写重复的代码。基于此我们可以想象，能否有一种工具让开发者可以直接使用其熟悉的编程语言，由该工具将代码转换为对应的SQL语句去操作数据库。一来这样可以避免直接使用SQL，直接使用原有编程语言即可实现数据库操作；二来能够减少一些重复代码，直接调用工具提供的API。")]),t._v(" "),a("p",[t._v("这样的工具被称为ORM（对象关系映射），用于在数据库和编程语言之间建立映射关系。ORM框架允许开发人员使用面向对象的方式来操作数据库，将数据库表映射为对象，将表中的行映射为对象的属性。ORM框架提供了一种抽象层，隐藏了底层数据库的细节，使开发人员可以使用面向对象的方式来进行数据库操作，而不必直接编写SQL语句。")]),t._v(" "),a("p",[t._v("Prisma就是一种ORM工具，为Node.js和TypeScript设计，方便不熟悉其他语言的前端开发者学习使用。")]),t._v(" "),a("h2",{attrs:{id:"定义模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义模型"}},[t._v("#")]),t._v(" 定义模型")]),t._v(" "),a("p",[t._v("按照"),a("a",{attrs:{href:"https://www.prisma.io/docs/getting-started/quickstart",target:"_blank",rel:"noopener noreferrer"}},[t._v("Prisma官方文档"),a("OutboundLink")],1),t._v("的快速开始章节的操作步骤，能够在本地快速启动一个Prisma项目。在"),a("code",[t._v("schema.prisma")]),t._v("文件内部就能开始定义"),a("strong",[t._v("模型")]),t._v("用于和数据库进行交互。首先是原版的文件")]),t._v(" "),a("div",{staticClass:"language-prisma extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('generator client {\n  provider = "prisma-client-js"\n}\n\ndatasource db {\n  provider = "sqlite"\n  url      = env("DATABASE_URL")\n}\n')])])]),a("p",[t._v("generator用于使用Prisma时相关的API。datasoure这里告诉Prisma使用的数据库的类型以及数据库的url链接，"),a("strong",[t._v("一般将url链接定义在env文件中保证安全性")]),t._v("。之后就可以在这个文件中定义模型了。")]),t._v(" "),a("p",[t._v("先定义两个简单的模型：")]),t._v(" "),a("div",{staticClass:"language-prisma extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("model User {\n  id    Int     @id @default(autoincrement())\n  email String  @unique\n  name  String?\n  posts Post[]\n}\n\nmodel Post {\n  id        Int     @id @default(autoincrement())\n  title     String\n  content   String?\n  published Boolean @default(false)\n  author    User    @relation(fields: [authorId], references: [id])\n  authorId  Int\n}\n")])])]),a("p",[t._v("如果你熟悉SQL，很快就能发现model定义的方式非常类似在数据库中定义table的方式。包含字段名称，字段类型以及修饰符等等。实际上二者的作用确实基本一致，model在Prisma中的作用就是用于代替table，同时提供一些更加简单的操作。")]),t._v(" "),a("p",[t._v("定义完model之后，还需要将其应用到数据库，Prisma和我们的数据库是相互独立的，执行以下命令可将model应用于数据库：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("npx prisma migrate dev "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--name")]),t._v(" init\n")])])]),a("p",[t._v("为了实现操作数据库以及后续开发者能够使用Prisma提供的简单的方式继续操作数据库，这个命令主要进行了一下三个步骤：")]),t._v(" "),a("ol",[a("li",[t._v("创建了一个SQL迁移文件，文件位于"),a("code",[t._v("prisma/migrations")]),t._v("目录下。")]),t._v(" "),a("li",[t._v("执行这个SQL迁移文件，操作数据库，将model定义的规则应用于数据库。")]),t._v(" "),a("li",[t._v("底层执行"),a("code",[t._v("prisma migration")]),t._v("命令，安装Prisma客户端同时基于用于定义的模型生成对应的API。")])]),t._v(" "),a("p",[t._v("想要和数据库交互，最后还是需要回到SQL。只是Prisma提供了一个更简单的方式操作数据库，我们只需要使用Prisma提供的API，最终生成SQL并执行的操作由Prisma代为进行。")]),t._v(" "),a("h2",{attrs:{id:"操作数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#操作数据"}},[t._v("#")]),t._v(" 操作数据")]),t._v(" "),a("p",[t._v("定义完模型之后，就可以使用Prisma提供的API直接对数据库进行操作了。在根目录下创建一个"),a("code",[t._v("script.ts")]),t._v("文件，写入以下内容：")]),t._v(" "),a("div",{staticClass:"language-typescript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-typescript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" PrismaClient "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'@prisma/client'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" prisma "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PrismaClient")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" user "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" prisma"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    data"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Alice'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      email"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'alice@prisma.io'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("console")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" prisma"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("$disconnect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("catch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("console")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" prisma"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("$disconnect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    process"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("运行这段代码就能发现我们已经在数据库中创建了一个新的用户，使用是"),a("code",[t._v("prisma.user.create")]),t._v("这样简单直接、语义化的API而非原生的SQL语句。Prisma还提供了一系列用于常规数据库操作的API，详细的可以参考g官方的"),a("a",{attrs:{href:"https://prisma.io/docs/orm/reference/prisma-client-reference#model-queries",target:"_blank",rel:"noopener noreferrer"}},[t._v("API文档"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"读取数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#读取数据"}},[t._v("#")]),t._v(" 读取数据")]),t._v(" "),a("p",[t._v("Prisma Client提供了多种从数据库读取数据的方式，首先看最简单的获取所有数据")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" user "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" prisma"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("findMany")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("console")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"模型间关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模型间关系"}},[t._v("#")]),t._v(" 模型间关系")]),t._v(" "),a("p",[t._v("Prisma的一个非常重要的优势就是，能够非常简单的处理数据之间的“关系”。数据库中的表通常来说都会存在一些关联，这也是关系型数据库得到广泛应用的原因之一。\n在上文中我们定义的"),a("code",[t._v("User")]),t._v("和"),a("code",[t._v("Post")]),t._v("这两个模型其实已经建立了联系。可以发现，每一个"),a("code",[t._v("User")]),t._v("都会包含一个"),a("code",[t._v("Post")]),t._v("，两者关联的依据则是，"),a("code",[t._v("Post")]),t._v("中的"),a("code",[t._v("authorId")]),t._v("要和"),a("code",[t._v("User")]),t._v("中的"),a("code",[t._v("id")]),t._v("相同。这一点体现在"),a("code",[t._v("Post")]),t._v("模型中"),a("code",[t._v("author")]),t._v("字段之后的修饰符。\n这是一个非常简单的关联关系。下面介绍三个常见的模型间关系以及使用Prisma处理这三种关系的方式。")]),t._v(" "),a("h3",{attrs:{id:"一对多"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一对多"}},[t._v("#")]),t._v(" 一对多")]),t._v(" "),a("p",[t._v("上面例子就是一个基本的一对多示例。在类似百度贴吧这样的网站中，一个用户可以发布很多个帖子。“一”就是用户，也就是"),a("code",[t._v("User")]),t._v("定义的模型，“多”就是帖子，也即"),a("code",[t._v("Post")]),t._v("定义的模型，这也是为什么在"),a("code",[t._v("User")]),t._v("的模型中"),a("code",[t._v("Post")]),t._v("需要加入数组修饰。")]),t._v(" "),a("p",[t._v("顺带一提，"),a("strong",[t._v("除了自增id，还可以使用uuid来作为每个模型id的修饰词，它将创建为每一个数据创建独一无二的id")]),t._v("。现在修改原模型")]),t._v(" "),a("div",{staticClass:"language-prisma extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("model User {\n  id    Int     @id @default(uuid())\n  email String  @unique\n  name  String?\n  posts Post[]\n}\n\nmodel Post {\n  id        Int     @id @default(uuid())\n  title     String\n  content   String?\n  published Boolean @default(false)\n  author    User    @relation(fields: [authorId], references: [id])\n  authorId  Int\n}\n")])])]),a("p",[t._v("一对多关系中还有一个常见的点，就是处理对同一个模型的多次引用的时候，需要加入标识符来指明引用字段。在"),a("code",[t._v("User")]),t._v("模型中新加入两个字段：")]),t._v(" "),a("div",{staticClass:"language-prisma extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("  writtenPosts  Post[]\n  favoratePosts Post[]\n")])])]),a("p",[t._v("然后在POST中定义对应的关联")]),t._v(" "),a("div",{staticClass:"language-prisma extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("  author        User    @relation(fields: [authorId], references: [id]) \n  authorId      String\n  favorateBy    User    @relation(fields: [favorateById], references: [id])\n  favorateById  String\n")])])]),a("p",[t._v("这样定义的方式会出现错误，因为Prisma不知道"),a("code",[t._v("User")]),t._v("中引用的两个"),a("code",[t._v("Post")]),t._v("到底指向"),a("code",[t._v("Post")]),t._v("模型中的哪一个字段。需要加入标识符来进行区分，修改后的字段定义如下：")]),t._v(" "),a("div",{staticClass:"language-prisma extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('  writtenPosts  Post[] @relation("writtenPosts")\n  favoratePosts Post[] @relation("favoratePosts")\n\n\n  author        User    @relation("writtenPosts", fields: [authorId], references: [id])\n  authorId      String\n  favorateBy    User    @relation("favoratePosts", fields: [favorateById], references: [id])\n  favorateById  String\n')])])]),a("p",[t._v("有了标识符就能知道具体建立关系时使用的字段。")]),t._v(" "),a("h3",{attrs:{id:"多对多"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多对多"}},[t._v("#")]),t._v(" 多对多")]),t._v(" "),a("p",[t._v("多对多关系常见于类别。比如一个帖子可以拥有多种类别，而一个类别中则可以包含多个帖子。先来定义一个"),a("code",[t._v("Category")]),t._v("模型。")]),t._v(" "),a("div",{staticClass:"language-prisma extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("model Category {\n  id    String @id @default(uuid())\n  posts Post[]\n}\n")])])]),a("p",[t._v("回到"),a("code",[t._v("Post")]),t._v("模型中，加入一个字段：")]),t._v(" "),a("div",{staticClass:"language-prisma extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("  category Category[]\n")])])]),a("p",[t._v("这样就建立了一个多对多的关系。这个工作简洁到我们只需要在两个模型中各自定义一个对另一个模型的多次引用，Prisma就能自动建立起一个多对多的关系表。\n之后，用户创建的每一个帖子都可以拥有多个类别，而每个类别中也可以包含许多不同的帖子。")]),t._v(" "),a("h3",{attrs:{id:"一对一"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一对一"}},[t._v("#")]),t._v(" 一对一")]),t._v(" "),a("p",[t._v("一对一关系的定义则更加简单，我们再另外定义一个模型")]),t._v(" "),a("div",{staticClass:"language-prisma extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("model UserReference {\n  id           String  @id @default(uuid())\n  emailUpdates Boolean @default(false)\n  user         User    @relation(fields: [userId], references: [id])\n  userId       Int     @unique\n}\n")])])]),a("p",[t._v("同样的，在User中新增一个字段")]),t._v(" "),a("div",{staticClass:"language-prisma extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("  userReference UserReference?\n")])])]),a("p",[t._v("这样就建立了一个一对一的关系，注意这里的"),a("code",[t._v("@unique")]),t._v("，它确保这个"),a("code",[t._v("userId")]),t._v("对于每个"),a("code",[t._v("UserReference")]),t._v("来说都是唯一的，这也是一对一关系的基础。")]),t._v(" "),a("h2",{attrs:{id:"模型属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模型属性"}},[t._v("#")]),t._v(" 模型属性")]),t._v(" "),a("p",[t._v("在字段名称以及字段数据类型之后的，一"),a("code",[t._v("@")]),t._v("开头的称为模型属性。可以用于设置字段默认值、标记不同模型字段之间的关系。除了之前提到的"),a("code",[t._v("@id")]),t._v("用于定义每个模型的ID，"),a("code",[t._v("@default")]),t._v("用于定义每个字段的默认值外。还有"),a("code",[t._v("@unique")]),t._v("这样的属性，确保该字段在每一个数据项当中都是独一无二的。还有一个用于数据更新的属性"),a("code",[t._v("@updatedAt")]),t._v("用于在数据更新记录更新的时间。")]),t._v(" "),a("p",[t._v("上面这类直接定义在字段之后的属性只会对该字段生效。Prisma还提供了另外一种属性的定义方式，块级属性。块级属性在模型中单独起一行定义，并且以"),a("code",[t._v("@@")]),t._v("开头。例如：")]),t._v(" "),a("div",{staticClass:"language-prisma extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("model User {\n  name         String\n  age          Int\n  email        String\n  emailUpdates Boolean @default(false)\n  user         User    @relation(fields: [userId], references: [id])\n  userId       Int     @unique\n\n  @@unique([age, name])\n  @@index(email)\n  @@id([name, userId])\n\n}\n")])])]),a("p",[t._v("分别解释一下三个块级属性的作用。")]),t._v(" "),a("ul",[a("li",[t._v("第一个的意思，两个用户的年龄和名字不能同时相同。")]),t._v(" "),a("li",[t._v("第二个是用于给字段建立索引，这在快速查询和对数据进行排序的时候非常有用。")]),t._v(" "),a("li",[t._v("最后一个是定义组合式的id。可以发现这个模型并没有定义id字段，而是使用"),a("code",[t._v("@@id")]),t._v("这样的方式定义了id。")])]),t._v(" "),a("h2",{attrs:{id:"枚举"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#枚举"}},[t._v("#")]),t._v(" 枚举")]),t._v(" "),a("p",[t._v("枚举用于将一个字段的值限定在几个特定的值之内。比如一个用户在系统中可以拥有的角色包括”基础用户“，”管理者“，”已登录“三个。则可以按照如下方式定义。首先定义一个"),a("code",[t._v("Role")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-prisma extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("enum Role {\n  BASIC\n  EDITOR\n  ADMIN\n}\n")])])]),a("p",[t._v("然后在用户模型中添加一个字段表示用户角色，并将其类型设置设置为"),a("code",[t._v("Role")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-prisma extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("model User {\n  id    Int     @id @default(autoincrement())\n  email String  @unique\n  name  String?\n  role  Role    @default(USER)\n}\n")])])]),a("p",[t._v("枚举可以保证"),a("code",[t._v("User")]),t._v("模型中"),a("code",[t._v("role")]),t._v("字段的值只会是"),a("code",[t._v("BASIC")]),t._v("，"),a("code",[t._v("ADMIN")]),t._v("，"),a("code",[t._v("EDITOR")]),t._v("三个中的一个。")])])}),[],!1,null,null,null);a.default=n.exports}}]);