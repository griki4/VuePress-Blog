(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{457:function(t,a,e){t.exports=e.p+"assets/img/http-cache.265f59c0.png"},536:function(t,a,e){"use strict";e.r(a);var s=e(2),o=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"缓存策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存策略"}},[t._v("#")]),t._v(" 缓存策略")]),t._v(" "),a("p",[t._v("谈及缓存作为前端开发者了解的最多的就是HTTP缓存。实际上的缓存机制还包括Memory Cache、Server Worker Cache、Push Cache等，不过HTTP缓存是最重要也是最常见的缓存机制，所以对它的了解也是最重要的。")]),t._v(" "),a("h3",{attrs:{id:"http缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http缓存"}},[t._v("#")]),t._v(" HTTP缓存")]),t._v(" "),a("p",[t._v("这是我们最为熟悉的缓存机制，Expires和Cache-Control等字段都是HTTP缓存相关的。HTTP缓存主要分为强缓存和协商缓存。")]),t._v(" "),a("h4",{attrs:{id:"强缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#强缓存"}},[t._v("#")]),t._v(" 强缓存")]),t._v(" "),a("p",[t._v("使用强缓存，在资源的有效期内，直接读取缓存中的资源，不必向服务器发起请求。")]),t._v(" "),a("p",[t._v("在http响应头中设置Expires或者Cache-Control属性可以启用强缓存策略。")]),t._v(" "),a("p",[t._v("（1）Expires")]),t._v(" "),a("p",[t._v("服务器在响应头中添加一个Expires属性，表示资源的过期时间，主要在http1.0中使用。Expires中设置的时间是绝对时间，是服务器的时间，因此如果浏览器和服务器的时间不一致，或者用户修改了浏览器的时间，采用Expires的强缓存策略就会出现问题。")]),t._v(" "),a("div",{staticClass:"language-makefile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-makefile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token target symbol"}},[t._v("Expires")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Sun, 19 Jun 2022 09"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("50"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("10 GMT\n")])])]),a("p",[t._v("（2）Cache-Control")]),t._v(" "),a("p",[t._v("为了解决Expires的问题，http1.1中提出了新的头部字段Cache-Control，用于实现对强缓存机制更加精确有效的控制。")]),t._v(" "),a("div",{staticClass:"language-makefile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-makefile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token target symbol"}},[t._v("Cache-Control")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" max-age"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("300\n")])])]),a("p",[t._v("除了max-age，Cache-Control的可选字段还有：")]),t._v(" "),a("ul",[a("li",[t._v("public：代表资源可以被任何对象缓存，无论是客户端还是代理服务器。")]),t._v(" "),a("li",[t._v("private：资源只可以被用户浏览器缓存，不允许任何代理服务器缓存。一些包含用户隐私信息的HTML都应该设置该选项。")]),t._v(" "),a("li",[t._v("no-cache：禁止在未经过和服务器询问的情况下使用缓存资源，也即绕过强缓存。")]),t._v(" "),a("li",[t._v("no-store：禁止任何形式的缓存，每次请求都是直接向服务器请求并下载完整的资源。")]),t._v(" "),a("li",[t._v("max-age：缓存过期时间，注意它记录的是浏览器发送请求与它上一次接受到服务器返回资源之间的时间差，比绝对时间更加精准。")]),t._v(" "),a("li",[t._v("s-maxage：适用于共享缓存，用于管理在代理服务器上的缓存。")]),t._v(" "),a("li",[t._v("max-stale：客户端愿意接收过期的资源，只要不超过规定的时间限制。")])]),t._v(" "),a("p",[a("strong",[t._v("如果Expires和Cache-Control两个字段同时出现，Cache-Control的优先级更高。")])]),t._v(" "),a("h4",{attrs:{id:"协商缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存"}},[t._v("#")]),t._v(" 协商缓存")]),t._v(" "),a("p",[t._v("协商缓存是强缓存没有命中的时候启用的，首先会创建一个请求发送到服务器来确认资源是否改变，没有改变则返回304，浏览器读取缓存资源，否则向浏览器返回修改后的资源。")]),t._v(" "),a("p",[t._v("在http头部设置Etag和Last-Modified可以启用协商缓存。")]),t._v(" "),a("p",[t._v("（1）Last-Modified")]),t._v(" "),a("p",[t._v("Last-Modifined的属性是浏览器所请求的资源最后一次发生变换的时间，这是由服务器所记录的。触发协商缓存，浏览器将他接收的资源的Last-Modified值放入请求头中的if-Modified-Since属性中，服务器对比对应资源的Last-Modified，一致则返回304，浏览器去读取本地缓存，否则则返回修改后的资源以及新的Last-Modified。")]),t._v(" "),a("p",[t._v("但是Last-Modified的精度只能到秒，如果资源在1秒内被连续修改很多次，这个方法就会有问题了。并且客户端和服务端的时间不一致也会导致缓存问题。")]),t._v(" "),a("p",[t._v("（2）Etag")]),t._v(" "),a("p",[t._v("Etag是为了解决Last-Modified的精确度不够高的问题而出现的。Etag是资源的唯一标识，只要资源改变就会改变，无论是在多短的时间内完成。触发协商缓存，浏览器在请求头中设置if-None-Match属性，值为上一次服务器响应资源的Etag值，浏览器对比请求头中的Etag和对应资源的Etag决定返回结果。")]),t._v(" "),a("p",[t._v("如果同时设置Etag和Last-Modified，Etag的优先级更高，主要处于几个方面的考虑。")]),t._v(" "),a("p",[t._v("● 资源周期性修改但是内容不改变，此时我们不希望浏览器认为这个资源该变了\n● 某些服务器无法准确获取资源修改的具体时间\n● Last-Modified对于秒级以上的文件修改速度无法准确判断")]),t._v(" "),a("p",[t._v("这也并不是说Etag就是最优解，因为Etag的计算是需要耗费服务器的资源的，如果考虑负载均衡使用多个服务器的时候，相同资源在不同服务器上的Etag是不同的，此时就最好不要设置Etag了。")]),t._v(" "),a("p",[t._v("最后用一张在"),a("a",{attrs:{href:"https://juejin.cn/post/6916157109906341902#heading-22",target:"_blank",rel:"noopener noreferrer"}},[t._v("掘金"),a("OutboundLink")],1),t._v("上找到的图片解释一下HTTP缓存的流程：\n"),a("img",{attrs:{src:e(457),alt:"HTTP缓存验证流程"}})]),t._v(" "),a("h3",{attrs:{id:"memory-cache"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#memory-cache"}},[t._v("#")]),t._v(" Memory Cache")]),t._v(" "),a("p",[t._v("内存缓存。直接从内存中取用缓存资源，是生效最早的一类缓存。但是只有一些如base64编码的图片，体积较小的js、css文件才能使用内存缓存，毕竟内存虽然快，但是内存资源很宝贵，不能随意取用。")]),t._v(" "),a("h3",{attrs:{id:"server-woker-cache"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#server-woker-cache"}},[t._v("#")]),t._v(" Server Woker Cache")]),t._v(" "),a("p",[t._v("独立于浏览器窗口之外的一种缓存机制。")]),t._v(" "),a("h3",{attrs:{id:"push-cache"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#push-cache"}},[t._v("#")]),t._v(" Push Cache")]),t._v(" "),a("p",[t._v("HTTP2在Server Push阶段生效的缓存。在上述所有的缓存策略都没有命中的情况下才会生效，存在于会话阶段的一种缓存。")]),t._v(" "),a("h2",{attrs:{id:"本地存储优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#本地存储优化"}},[t._v("#")]),t._v(" 本地存储优化")]),t._v(" "),a("p",[t._v("将一些重要数据直接存储在本地也是一种性能优化的选择，常见的本地存储策略包括Cookie、Web Storage、IndexDB等等。")]),t._v(" "),a("h3",{attrs:{id:"cookie"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cookie"}},[t._v("#")]),t._v(" Cookie")]),t._v(" "),a("p",[t._v("cookie是服务器向用户浏览器发送的一小块数据，保存在用户的电脑中，cookie会在下一次浏览器向同一个服务器发送请求的时候随请求一起被发送至服务器。使用它可以告知服务器两次请求是否来自同一个浏览器，可以实现保持用户登录状态等功能。")]),t._v(" "),a("h4",{attrs:{id:"创建cookie"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建cookie"}},[t._v("#")]),t._v(" 创建cookie")]),t._v(" "),a("p",[a("strong",[t._v("服务器收到")]),a("code",[t._v("http")]),t._v("请求后，在响应头中添加"),a("code",[t._v("Set-Cookie")]),t._v("选项并添加信息。cookie一般是是以键值对的形式存在，比如下面这个响应头。")]),t._v(" "),a("div",{staticClass:"language-makefile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-makefile"}},[a("code",[t._v("HTTP/1.0 200 OK\n"),a("span",{pre:!0,attrs:{class:"token target symbol"}},[t._v("Content-type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" text/html\n"),a("span",{pre:!0,attrs:{class:"token target symbol"}},[t._v("Set-Cookie")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" yummy_cookie"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("choco\n"),a("span",{pre:!0,attrs:{class:"token target symbol"}},[t._v("Set-Cookie")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" tasty_cookie"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("strawberry\n\n[页面内容]\n")])])]),a("p",[t._v("之后，如果浏览器再次向该服务器发起请求，则会在请求头中附带上cookie信息。")]),t._v(" "),a("div",{staticClass:"language-makefile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-makefile"}},[a("code",[t._v("GET /sample_page.html HTTP/1.1\n"),a("span",{pre:!0,attrs:{class:"token target symbol"}},[t._v("Host")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" www.example.org\n"),a("span",{pre:!0,attrs:{class:"token target symbol"}},[t._v("Cookie")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" yummy_cookie"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("choco"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" tasty_cookie"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("strawberry\n")])])]),a("h4",{attrs:{id:"cookie生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cookie生命周期"}},[t._v("#")]),t._v(" cookie生命周期")]),t._v(" "),a("ul",[a("li",[t._v("默认情况下，浏览器关闭后cookie就会被删除，这种情况下我们没有指定过期时间（"),a("code",[t._v("expires")]),t._v("）或者说是（"),a("code",[t._v("Max-Age")]),t._v("）。某些包含会话回复功能的浏览器会保存这种cookie，延长它的生命周期。")]),t._v(" "),a("li",[t._v("通过指定过期时间，可以长久的保存cookie。"),a("strong",[a("strong",[t._v("将cookie的过期时间设定为过去可以立即删除cookie")])]),t._v("。")])]),t._v(" "),a("p",[t._v("下面就是一个设定了过期时间的cookie。cookie的过期时间需要设置为GMT格式。")]),t._v(" "),a("div",{staticClass:"language-makefile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-makefile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token target symbol"}},[t._v("Set-Cookie")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" id"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("a3fWa"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" Expires"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("Mon, 3 Oct 2022 07"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("28"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("00 GMT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h4",{attrs:{id:"限制访问"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#限制访问"}},[t._v("#")]),t._v(" 限制访问")]),t._v(" "),a("p",[a("strong",[t._v("为保证cookie在传输过程中的安全性，可以使用")]),a("code",[t._v("Secure")]),t._v("和"),a("code",[t._v("HttpOnly")]),t._v("属性。")]),t._v(" "),a("p",[a("code",[t._v("Secure</span>")]),t._v("属性可以让cookie只经过被https加密后的请求进行发送。但也并非绝对安全的措施。")]),t._v(" "),a("p",[a("code",[t._v("HttpOnly")]),t._v("属性可以让JavaScript的"),a("code",[t._v("Document.cookie")]),t._v("API无法访问cookie信息，对于保持和服务端对话的cookie来说，没有必要让将它们的信息暴露给JavaScript代码，这样做还可以防范XSS（跨站点脚本攻击）。")]),t._v(" "),a("p",[t._v("比如：")]),t._v(" "),a("div",{staticClass:"language-makefile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-makefile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token target symbol"}},[t._v("Set-Cookie")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" id"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("a3fWa"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" Expires"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("Mon, 3 Oct 2022 07"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("28"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("00 GMT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" Secure"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" HttpOnly\n")])])]),a("h4",{attrs:{id:"作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用域"}},[t._v("#")]),t._v(" 作用域")]),t._v(" "),a("p",[a("strong",[t._v("作用域是设置可以向哪些URL发送cookie的选项。通过")]),a("code",[t._v("Domain")]),t._v("和"),a("code",[t._v("path")]),t._v("属性来进行设置")]),t._v(" "),a("p",[a("code",[t._v("Domain")]),t._v("指定哪些主机可以接收cookie，如果不指定则默认只对其本身有效，子域名均不可读取cookie。指定之后，则其下的所有子域名都可以接收cookie。")]),t._v(" "),a("p",[a("code",[t._v("path")]),t._v("使用"),a("code",[t._v("/")]),t._v("进行路径分割。如果设置"),a("code",[t._v("path = /doc")]),t._v("则下面所有地址都可以接收cookie")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("/doc")])]),t._v(" "),a("li",[a("code",[t._v("doc/Web")])]),t._v(" "),a("li",[a("code",[t._v("doc/Web/http")])])]),t._v(" "),a("h4",{attrs:{id:"cookie的特性和使用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cookie的特性和使用场景"}},[t._v("#")]),t._v(" cookie的特性和使用场景")]),t._v(" "),a("p",[t._v("特性：")]),t._v(" "),a("ul",[a("li",[t._v("cookie创建成功后名称无法再修改。")]),t._v(" "),a("li",[t._v("cookie无法跨域名，这个在cookie的定义的时候已经说明了，这是符合cookie的本意的。")]),t._v(" "),a("li",[t._v("同一域名下不能设置超过20个cookie，每个cookie的大小不能超过4kb。")])]),t._v(" "),a("p",[t._v("如果非要跨域名共享cookie，可以使用Nginx反向代理（正向代理代理客户端，反向代理则代理服务器），或者登录一个网站后向另一网站写cookie。")]),t._v(" "),a("p",[t._v("使用场景：")]),t._v(" "),a("ul",[a("li",[t._v("保持用户登录状态")]),t._v(" "),a("li",[t._v("统计页面点击次数")])]),t._v(" "),a("p",[t._v("Cookie虽然好用，但是过小的存储空间以及每次都会随着请求发送（有时候我们请求服务器可能只是获取一些像logo一样的资源，不需要携带Cookie，但是浏览器还是会默认带上Cookie，这无疑会导致大量的性能浪费）的特性还是限制了我们对于本地存储的期待，因此Web Storage出现了。")]),t._v(" "),a("h3",{attrs:{id:"web-storage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#web-storage"}},[t._v("#")]),t._v(" Web Storage")]),t._v(" "),a("h4",{attrs:{id:"localstorage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#localstorage"}},[t._v("#")]),t._v(" LocalStorage")]),t._v(" "),a("p",[t._v("当数据量较大且不需要频繁在浏览器和服务器之间来往的时候，就可以使用"),a("code",[t._v("localStorage")]),t._v("。")]),t._v(" "),a("p",[a("code",[t._v('<span class="ne-text">localStorage</span>')]),t._v("的出现解决了cookie存储数据的许多难点")]),t._v(" "),a("ul",[a("li",[t._v("大小限制为5MB，比cookie容量大，能够存储更多的信息。")]),t._v(" "),a("li",[t._v("直接存储在本地，除非用户主动清理否则一直有效。")]),t._v(" "),a("li",[t._v("仅在本地存储，不会在每次发送请求时被携带。")])]),t._v(" "),a("p",[t._v("当然也有一些问题。")]),t._v(" "),a("ul",[a("li",[t._v("受到同源策略的限制。必须是同一协议、域名和端口下的站点才能访问。")]),t._v(" "),a("li",[t._v("浏览器兼容问题，IE8以下不兼容。（因为是HMLT5提出的新规范，IE的时代已经结束咧！）")]),t._v(" "),a("li",[t._v("隐私模式下的浏览器无法读取。")])]),t._v(" "),a("p",[t._v("常用的API：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//保存数据")]),t._v("\nlocalStorage"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setItem")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'name'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'value'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//读取数据")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" data "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" localStorage"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getItem")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'name'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//删除数据")]),t._v("\nlocalStorage"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeItem")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'name'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//清除所有数据")]),t._v("\nlocalStorage"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("clear")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//获取指定索引值数据")]),t._v("\nlocalStorage"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("key")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h4",{attrs:{id:"sessionstorage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sessionstorage"}},[t._v("#")]),t._v(" SessionStorage")]),t._v(" "),a("p",[a("code",[t._v("sessionStorage")]),t._v("是和"),a("code",[t._v("localStorge")]),t._v("一起提出来的客户端存储策略。")]),t._v(" "),a("p",[a("code",[t._v("sessionStorage")]),t._v("和"),a("code",[t._v("localStorage")]),t._v("的最大的不同之处在于“短命”。虽然二者都是在本地存储数据，但是一旦页面或者浏览器关闭，"),a("code",[t._v("sessionStorage")]),t._v("的数据就会被清除。如果是因为浏览器崩溃而关闭的页面的话，它还可以恢复页面，但这得取决于浏览器是否支持。")]),t._v(" "),a("p",[a("code",[t._v("sessionStorage")]),t._v("也受到同源策略的限制，并且附加上一条更加严格的限制，必须是"),a("strong",[t._v("同一浏览器下的同一个页面")]),t._v("才能共享"),a("code",[t._v("sessionStorage")]),t._v("下的数据。")]),t._v(" "),a("p",[a("code",[t._v("sessionStorage")]),t._v("和"),a("code",[t._v("localStorage")]),t._v("的API基本相同。")]),t._v(" "),a("p",[t._v("应用场景：由于是临时会话信息存储，所以经常用来保存网站的游客登录或者浏览信息。")]),t._v(" "),a("h3",{attrs:{id:"indexdb"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#indexdb"}},[t._v("#")]),t._v(" indexDB")]),t._v(" "),a("p",[t._v("在浏览器运行的事务性数据库，既然是数据库，存储的数据容量一般没有限制。不过目前接触到的应用场景比较少，后续如果有机会在生产实践中接触到可以详细了解一下。")])])}),[],!1,null,null,null);a.default=o.exports}}]);